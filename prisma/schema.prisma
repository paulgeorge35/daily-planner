generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(uuid())
    authId    String   @unique
    email     String   @unique
    name      String
    tasks     Task[]
    labels    Label[]
    createdAt DateTime @default(now())
    updatedAt DateTime
}

model Task {
    id          Int          @id @default(autoincrement())
    title       String
    notes       String
    recurrent   Boolean
    dump        Boolean
    done        Boolean
    estimate    Int
    actual      Int
    userId      String
    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    labelId     Int?
    label       Label?       @relation(fields: [labelId], references: [id], onDelete: SetNull)
    subtasks    Subtask[]
    recurrences Recurrence[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime
}

model Subtask {
    id        Int      @id @default(autoincrement())
    title     String
    done      Boolean
    taskId    Int
    task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime
}

model Label {
    id        Int      @id @default(autoincrement())
    name      String
    color     String
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    tasks     Task[]
    createdAt DateTime @default(now())
    updatedAt DateTime
}

model Recurrence {
    id        Int            @id @default(autoincrement())
    type      RecurrenceType @default(WEEKLY)
    start     DateTime
    end       DateTime
    taskId    Int
    Task      Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
    createdAt DateTime       @default(now())
    updatedAt DateTime
}

enum RecurrenceType {
    DAILY
    DAILY_WEEKDAYS
    WEEKLY
    BIWEEKLY
    MONTHLY
    BIMONTHLY
    YEARLY
}
