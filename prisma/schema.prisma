generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Profile {
    id         String   @id(map: "profile_pkey") @db.Uuid
    username   String?  @unique(map: "profile_username_key")
    email      String   @unique
    full_name  String?
    avatar_url String?
    labels     Label[]
    tasks      Task[]
    columns    Column[]
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Task {
    id          Int          @id @default(autoincrement())
    title       String
    notes       String?
    recurrent   Boolean      @default(false)
    estimate    Int          @default(0)
    actual      Int          @default(0)
    date        DateTime?
    dump        Boolean      @default(true)
    done        Boolean      @default(false)
    archived    Boolean      @default(false)
    recurrences Recurrence[]
    subtasks    Subtask[]
    labelId     Int?
    label       Label?       @relation(fields: [labelId], references: [id])
    userId      String       @db.Uuid
    user        Profile      @relation(fields: [userId], references: [id])
    index       Int          @default(0)
    indexes     Int[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}

model Subtask {
    id        Int      @id @default(autoincrement())
    title     String
    done      Boolean  @default(false)
    taskId    Int
    task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
    index     Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Label {
    id        Int      @id @default(autoincrement())
    name      String   @default("New Label")
    color     String   @default("#000000")
    tasks     Task[]
    userId    String   @db.Uuid
    user      Profile  @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Recurrence {
    id        Int            @id @default(autoincrement())
    type      RecurrenceType @default(WEEKLY)
    start     DateTime       @default(now())
    end       DateTime?
    taskId    Int
    task      Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
}

model Column {
    id       Int     @id @default(autoincrement())
    identity String  @unique @default("dump")
    index    Int[]
    userId   String  @db.Uuid
    user     Profile @relation(fields: [userId], references: [id])
}

enum RecurrenceType {
    DAILY
    DAILY_WEEKDAYS
    WEEKLY
    BIWEEKLY
    MONTHLY
    BIMONTHLY
    YEARLY
}
